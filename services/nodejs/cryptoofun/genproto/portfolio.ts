/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: portfolio.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
import * as grpc_1 from '@grpc/grpc-js';
export class AskPortfolioRequest extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          user_id?: string;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('user_id' in data && data.user_id != undefined) {
        this.user_id = data.user_id;
      }
    }
  }
  get user_id() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set user_id(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: { user_id?: string }): AskPortfolioRequest {
    const message = new AskPortfolioRequest({});
    if (data.user_id != null) {
      message.user_id = data.user_id;
    }
    return message;
  }
  toObject() {
    const data: {
      user_id?: string;
    } = {};
    if (this.user_id != null) {
      data.user_id = this.user_id;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.user_id.length) writer.writeString(1, this.user_id);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AskPortfolioRequest {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new AskPortfolioRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.user_id = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): AskPortfolioRequest {
    return AskPortfolioRequest.deserialize(bytes);
  }
}
export class AskPortfolioResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          portfolio?: PortfolioItem[];
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('portfolio' in data && data.portfolio != undefined) {
        this.portfolio = data.portfolio;
      }
    }
  }
  get portfolio() {
    return pb_1.Message.getRepeatedWrapperField(this, PortfolioItem, 1) as PortfolioItem[];
  }
  set portfolio(value: PortfolioItem[]) {
    pb_1.Message.setRepeatedWrapperField(this, 1, value);
  }
  static fromObject(data: {
    portfolio?: ReturnType<typeof PortfolioItem.prototype.toObject>[];
  }): AskPortfolioResponse {
    const message = new AskPortfolioResponse({});
    if (data.portfolio != null) {
      message.portfolio = data.portfolio.map(item => PortfolioItem.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data: {
      portfolio?: ReturnType<typeof PortfolioItem.prototype.toObject>[];
    } = {};
    if (this.portfolio != null) {
      data.portfolio = this.portfolio.map((item: PortfolioItem) => item.toObject());
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.portfolio.length)
      writer.writeRepeatedMessage(1, this.portfolio, (item: PortfolioItem) =>
        item.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AskPortfolioResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new AskPortfolioResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(message.portfolio, () =>
            pb_1.Message.addToRepeatedWrapperField(
              message,
              1,
              PortfolioItem.deserialize(reader),
              PortfolioItem
            )
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): AskPortfolioResponse {
    return AskPortfolioResponse.deserialize(bytes);
  }
}
export class PortfolioItem extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          ticker?: string;
          cost?: number;
          amount?: number;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('ticker' in data && data.ticker != undefined) {
        this.ticker = data.ticker;
      }
      if ('cost' in data && data.cost != undefined) {
        this.cost = data.cost;
      }
      if ('amount' in data && data.amount != undefined) {
        this.amount = data.amount;
      }
    }
  }
  get ticker() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set ticker(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get cost() {
    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
  }
  set cost(value: number) {
    pb_1.Message.setField(this, 2, value);
  }
  get amount() {
    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
  }
  set amount(value: number) {
    pb_1.Message.setField(this, 3, value);
  }
  static fromObject(data: { ticker?: string; cost?: number; amount?: number }): PortfolioItem {
    const message = new PortfolioItem({});
    if (data.ticker != null) {
      message.ticker = data.ticker;
    }
    if (data.cost != null) {
      message.cost = data.cost;
    }
    if (data.amount != null) {
      message.amount = data.amount;
    }
    return message;
  }
  toObject() {
    const data: {
      ticker?: string;
      cost?: number;
      amount?: number;
    } = {};
    if (this.ticker != null) {
      data.ticker = this.ticker;
    }
    if (this.cost != null) {
      data.cost = this.cost;
    }
    if (this.amount != null) {
      data.amount = this.amount;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.ticker.length) writer.writeString(1, this.ticker);
    if (this.cost != 0) writer.writeDouble(2, this.cost);
    if (this.amount != 0) writer.writeDouble(3, this.amount);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PortfolioItem {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new PortfolioItem();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.ticker = reader.readString();
          break;
        case 2:
          message.cost = reader.readDouble();
          break;
        case 3:
          message.amount = reader.readDouble();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): PortfolioItem {
    return PortfolioItem.deserialize(bytes);
  }
}
export class ModifySingleTickerRequest extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          user_id?: string;
          ticker?: string;
          cost?: number;
          amount?: number;
        }
  ) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('user_id' in data && data.user_id != undefined) {
        this.user_id = data.user_id;
      }
      if ('ticker' in data && data.ticker != undefined) {
        this.ticker = data.ticker;
      }
      if ('cost' in data && data.cost != undefined) {
        this.cost = data.cost;
      }
      if ('amount' in data && data.amount != undefined) {
        this.amount = data.amount;
      }
    }
  }
  get user_id() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set user_id(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get ticker() {
    return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
  }
  set ticker(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  get cost() {
    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
  }
  set cost(value: number) {
    pb_1.Message.setField(this, 3, value);
  }
  get amount() {
    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
  }
  set amount(value: number) {
    pb_1.Message.setField(this, 4, value);
  }
  static fromObject(data: {
    user_id?: string;
    ticker?: string;
    cost?: number;
    amount?: number;
  }): ModifySingleTickerRequest {
    const message = new ModifySingleTickerRequest({});
    if (data.user_id != null) {
      message.user_id = data.user_id;
    }
    if (data.ticker != null) {
      message.ticker = data.ticker;
    }
    if (data.cost != null) {
      message.cost = data.cost;
    }
    if (data.amount != null) {
      message.amount = data.amount;
    }
    return message;
  }
  toObject() {
    const data: {
      user_id?: string;
      ticker?: string;
      cost?: number;
      amount?: number;
    } = {};
    if (this.user_id != null) {
      data.user_id = this.user_id;
    }
    if (this.ticker != null) {
      data.ticker = this.ticker;
    }
    if (this.cost != null) {
      data.cost = this.cost;
    }
    if (this.amount != null) {
      data.amount = this.amount;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.user_id.length) writer.writeString(1, this.user_id);
    if (this.ticker.length) writer.writeString(2, this.ticker);
    if (this.cost != 0) writer.writeDouble(3, this.cost);
    if (this.amount != 0) writer.writeDouble(4, this.amount);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifySingleTickerRequest {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new ModifySingleTickerRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.user_id = reader.readString();
          break;
        case 2:
          message.ticker = reader.readString();
          break;
        case 3:
          message.cost = reader.readDouble();
          break;
        case 4:
          message.amount = reader.readDouble();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ModifySingleTickerRequest {
    return ModifySingleTickerRequest.deserialize(bytes);
  }
}
export class ModifySingleTickerResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(data?: any[] | {}) {
    super();
    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
    if (!Array.isArray(data) && typeof data == 'object') {
    }
  }
  static fromObject(data: {}): ModifySingleTickerResponse {
    const message = new ModifySingleTickerResponse({});
    return message;
  }
  toObject() {
    const data: {} = {};
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifySingleTickerResponse {
    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
      message = new ModifySingleTickerResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): ModifySingleTickerResponse {
    return ModifySingleTickerResponse.deserialize(bytes);
  }
}
interface GrpcUnaryServiceInterface<P, R> {
  (
    message: P,
    metadata: grpc_1.Metadata,
    options: grpc_1.CallOptions,
    callback: grpc_1.requestCallback<R>
  ): grpc_1.ClientUnaryCall;
  (
    message: P,
    metadata: grpc_1.Metadata,
    callback: grpc_1.requestCallback<R>
  ): grpc_1.ClientUnaryCall;
  (
    message: P,
    options: grpc_1.CallOptions,
    callback: grpc_1.requestCallback<R>
  ): grpc_1.ClientUnaryCall;
  (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
  (
    message: P,
    metadata: grpc_1.Metadata,
    options?: grpc_1.CallOptions
  ): grpc_1.ClientReadableStream<R>;
  (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
  (
    metadata: grpc_1.Metadata,
    options: grpc_1.CallOptions,
    callback: grpc_1.requestCallback<R>
  ): grpc_1.ClientWritableStream<P>;
  (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
  (
    options: grpc_1.CallOptions,
    callback: grpc_1.requestCallback<R>
  ): grpc_1.ClientWritableStream<P>;
  (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
  (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
  (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
  (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
  (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedPortfolioServiceService {
  static definition = {
    AskPortfolio: {
      path: '/PortfolioService/AskPortfolio',
      requestStream: false,
      responseStream: false,
      requestSerialize: (message: AskPortfolioRequest) => Buffer.from(message.serialize()),
      requestDeserialize: (bytes: Buffer) => AskPortfolioRequest.deserialize(new Uint8Array(bytes)),
      responseSerialize: (message: AskPortfolioResponse) => Buffer.from(message.serialize()),
      responseDeserialize: (bytes: Buffer) =>
        AskPortfolioResponse.deserialize(new Uint8Array(bytes)),
    },
    ModifySingleTicker: {
      path: '/PortfolioService/ModifySingleTicker',
      requestStream: false,
      responseStream: false,
      requestSerialize: (message: ModifySingleTickerRequest) => Buffer.from(message.serialize()),
      requestDeserialize: (bytes: Buffer) =>
        ModifySingleTickerRequest.deserialize(new Uint8Array(bytes)),
      responseSerialize: (message: ModifySingleTickerResponse) => Buffer.from(message.serialize()),
      responseDeserialize: (bytes: Buffer) =>
        ModifySingleTickerResponse.deserialize(new Uint8Array(bytes)),
    },
  };
  [method: string]: grpc_1.UntypedHandleCall;
  abstract AskPortfolio(
    call: grpc_1.ServerUnaryCall<AskPortfolioRequest, AskPortfolioResponse>,
    callback: grpc_1.sendUnaryData<AskPortfolioResponse>
  ): void;
  abstract ModifySingleTicker(
    call: grpc_1.ServerUnaryCall<ModifySingleTickerRequest, ModifySingleTickerResponse>,
    callback: grpc_1.sendUnaryData<ModifySingleTickerResponse>
  ): void;
}
export class PortfolioServiceClient extends grpc_1.makeGenericClientConstructor(
  UnimplementedPortfolioServiceService.definition,
  'PortfolioService',
  {}
) {
  constructor(
    address: string,
    credentials: grpc_1.ChannelCredentials,
    options?: Partial<grpc_1.ChannelOptions>
  ) {
    super(address, credentials, options);
  }
  AskPortfolio: GrpcUnaryServiceInterface<AskPortfolioRequest, AskPortfolioResponse> = (
    message: AskPortfolioRequest,
    metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AskPortfolioResponse>,
    options?: grpc_1.CallOptions | grpc_1.requestCallback<AskPortfolioResponse>,
    callback?: grpc_1.requestCallback<AskPortfolioResponse>
  ): grpc_1.ClientUnaryCall => {
    return super.AskPortfolio(message, metadata, options, callback);
  };
  ModifySingleTicker: GrpcUnaryServiceInterface<
    ModifySingleTickerRequest,
    ModifySingleTickerResponse
  > = (
    message: ModifySingleTickerRequest,
    metadata:
      | grpc_1.Metadata
      | grpc_1.CallOptions
      | grpc_1.requestCallback<ModifySingleTickerResponse>,
    options?: grpc_1.CallOptions | grpc_1.requestCallback<ModifySingleTickerResponse>,
    callback?: grpc_1.requestCallback<ModifySingleTickerResponse>
  ): grpc_1.ClientUnaryCall => {
    return super.ModifySingleTicker(message, metadata, options, callback);
  };
}
